//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataGenerator.ORM
{
    using System;
    using System.Collections.Generic;
    
    public partial class DaysOfConf
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public DaysOfConf()
        {
            this.OrdersOnConfDays = new HashSet<OrdersOnConfDays>();
            this.PriceThresholds = new HashSet<PriceThresholds>();
            this.Workshops = new HashSet<Workshops>();
        }
    
        public int DayOfConfID { get; set; }
        public int ConfID { get; set; }
        public System.DateTime Date { get; set; }
        public short SpaceLimit { get; set; }
    
        public virtual Conferences Conferences { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrdersOnConfDays> OrdersOnConfDays { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PriceThresholds> PriceThresholds { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Workshops> Workshops { get; set; }
        public decimal PriceThresholdForDate(DateTime date) {
            decimal res = 0;
            DateTime Min = DateTime.MaxValue;
            foreach(PriceThresholds pt in PriceThresholds) {
                if (pt.EndDate >= date && pt.EndDate < Min) {
                    Min = pt.EndDate;
                    res = pt.Value;
                } 
            }
            if (Min == DateTime.MaxValue)
                throw new IndexOutOfRangeException($"Cannot find PriceThreshold for given date " +
                    $"({date}, DayOfConf date: {Date})!");
            return res;
        }
        public float GetStudentDiscount() {
            return Conferences.StudentDiscount;
        }
    }
}
